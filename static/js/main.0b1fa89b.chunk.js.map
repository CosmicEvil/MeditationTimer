{"version":3,"sources":["Timer.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","minutes","seconds","checked","handleChange","bind","handleSubmit","addTime","this","className","onSubmit","onClick","event","target","name","value","setState","clearInterval","myInterval","time","add","min","secondHelp","preventDefault","setInterval","Component","Header","href","App","style","width","height","id","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b1fa89b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Timer extends Component {\n    constructor() {\n        super();\n        this.state = {\n          minutes: 5,\n          seconds: 0,\n          checked: false\n       \n        };\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.addTime= this.addTime.bind(this)\n    }\n\n    render() {\n        const { minutes, seconds } = this.state\n        return (\n            <div className=\"timer  light-green lighten-4\">\n                { minutes === 0 && seconds === 0\n                    ? <div className=\"time light-green-text text-darken-4\"><h1>Time Remaining:</h1><h2>Done!</h2></div>\n                    : <div className=\"time light-green-text text-darken-4\"><h1>Time Remaining:</h1><h2> {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h2></div>\n                }\n                <form className=\"form\" onSubmit={this.handleSubmit}>\n                    { this.state.checked\n                        ? <button className=\"waves-effect waves-light btn-large\">stop</button>\n                        : <button className=\"waves-effect waves-light btn-large\">start</button>\n                    }\n                </form>\n               <div className=\"more\"> \n                    <a className=\"waves-effect waves-red red lighten-2 btn\" onClick={() => this.addTime(5,false, true)} >- 5m</a>\n                    <a className=\"waves-effect waves-red red lighten-2 btn\" onClick={() => this.addTime(1,false, true)}>- 1m</a>\n                    <a className=\"waves-effect waves-red red lighten-2 btn\" onClick={() => this.addTime(0.5,false,false)} >- 30s</a>\n                    <div className=\"break\"></div>\n                    <a className=\"waves-effect waves-green light-green btn\" onClick={() => this.addTime(0.5,true, false)} >+ 30s</a>\n                    <a className=\"waves-effect waves-green light-green btn\" onClick={() => this.addTime(1,true, true)} >+ 1m</a>\n                    <a className=\"waves-effect waves-green light-green btn\" onClick={() => this.addTime(5,true, true)} >+ 5m</a>\n               \n                </div>\n            </div>\n        )\n    }\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({ [name]: value })\n    }\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n    addTime(time,add, min){\n        const { seconds, minutes } = this.state\n        const secondHelp = time * 60\n        if(add && min){\n            this.setState(({ minutes }) => ({\n                minutes: minutes + time\n            }))\n        } else if(!add && min){\n            if((minutes - time) > 0  ){\n                this.setState(({ minutes }) => ({\n                    minutes: minutes - time\n                }))\n            } else if((minutes - time) < 0){\n                this.setState(({ minutes }) => ({\n                    minutes: 0,\n                    seconds: 0\n                }))\n            } else {\n                this.setState(({ minutes }) => ({\n                    minutes: 0 \n                }))\n            }\n        }\n        else if(add && !min){ \n            if((secondHelp + seconds) > 59){\n                this.setState(({ minutes }) => ({\n                    minutes: minutes + 1,\n                    seconds: (secondHelp + seconds) - 60\n                }))\n            } else {\n                this.setState(({ seconds }) => ({\n                    seconds: secondHelp + seconds\n                }))\n            }\n        } else {\n            if((seconds - secondHelp) < 0){\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59 + (seconds - secondHelp)\n                    }))\n                    if ( minutes <= 0) {\n                        this.setState(({ minutes }) => ({\n                            minutes: 0,\n                            seconds: 0\n                        }))\n                    }\n            } else {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - secondHelp\n                }))\n           }\n        }\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        if(!this.state.checked){\n            this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state\n            if (seconds > 0) {\n              this.setState(({ seconds }) => ({\n                seconds: seconds - 1\n              }))\n            }\n            if (seconds === 0) {\n              if (minutes === 0) {\n                clearInterval(this.myInterval)\n              } else {\n                this.setState(({ minutes }) => ({\n                  minutes: minutes - 1,\n                  seconds: 59\n                }))\n              }\n            }\n          }, 1000)\n        } else{\n           clearInterval(this.myInterval)\n        }\n        this.setState({checked: !this.state.checked})\n    }  \n}\nexport default Timer;\n","import  React, { Component } from 'react'\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <nav>\n                <div className=\"nav-wrapper light-green darken-2\">\n                <a href=\"#\" className=\"brand-logo\">Meditation timer </a>\n                {/* <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><a href=\"sass.html\">Sass</a></li>\n                    <li><a href=\"badges.html\">Components</a></li>\n                    <li><a href=\"collapsible.html\">JavaScript</a></li>\n                </ul> */}\n                </div>\n          </nav>\n                \n        )\n    }\n}\n","import  React, { Component } from 'react'\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <footer className=\"page-footer  light-green lighten-4\">\n                <h1 className=\"grey-text\"> wouter massie 2019</h1>\n            </footer>\n        )\n    }\n}\n","import React from 'react';\nimport Timer from './Timer';\nimport Footer from './Footer';\nimport Header from './Header';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div style={{width:\"100%\",height:\"100%\"}} >\n      <Header />\n      <div id=\"main\">\n        <Timer />\n      </div>\n      {/* <Footer /> */}\n    </div>\n     \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}